{"version":3,"sources":["components/Rocketwidget/actions.js","components/Rocketwidget/reducer.js","components/Filterbar.js","components/HOC/withReducer.js","components/Rocketwidget/RocketList.js","serviceWorker.js","index.js"],"names":["axios","require","rocketData","Actions","getUserFilter","filter","filterString","initialState","records","mapStateToProps","mapDispatchToProps","reducer","Years","successfullLaunch","successfullLanding","Filterbar","props","filterYear","year","console","log","setState","onUpdateFilter","state","updateLandingStatus","status","landing","udpateLaunchingStatus","launch","className","map","y","index","onClick","key","t","React","Component","RocketList","this","onFetchData","length","r","alt","rocket","src","img","mission_name","flight_number","mission_id","launch_year","launch_success","withReducer","dispatch","a","get","result","data","type","evt","doUpdateFilter","actions","Object","keys","UserComponent","store","createStore","applyMiddleware","thunk","Mycomp","connect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b36fa265.chunk.js","sourcesContent":["const axios = require(\"axios\");\r\nconst rocketData = require(\"./flight.json\");\r\nexport const Actions = {\r\n  FETCH_INITIAL_RECORD: \"FETCH_INITIAL_RECORD\",\r\n  UPDATE_DATA: \"UPDATE_DATA\",\r\n};\r\nfunction getUserFilter(filter) {\r\n  let filterString = \"\";\r\n  if (typeof filter[\"launch\"] === \"boolean\") {\r\n    filterString = `${filterString}&launch_success=${filter[\"launch\"]}`;\r\n  }\r\n  if (typeof filter[\"landing\"] === \"boolean\") {\r\n    filterString = `${filterString}&land_success=${filter[\"landing\"]}`;\r\n  }\r\n  if (filter[\"year\"]) {\r\n    filterString = `${filterString}&launch_year=${filter[\"year\"]}`;\r\n  }\r\n  return filterString;\r\n}\r\n\r\nexport function doFetchData() {\r\n  return async (dispatch) => {\r\n    try {\r\n      const result = await axios.get(\r\n        \"https://api.spaceXdata.com/v3/launches?limit=15\"\r\n      );\r\n      if (result.data) {\r\n        dispatch({ type: Actions.FETCH_INITIAL_RECORD, records: result.data });\r\n      }\r\n    } catch (ex) {\r\n      const result = { data: rocketData }; // api is failing so feeded from mockdata\r\n      if (result.data && result.data.length > 0) {\r\n        dispatch({ type: Actions.FETCH_INITIAL_RECORD, records: result.data });\r\n      }\r\n      throw ex;\r\n    }\r\n  };\r\n}\r\nexport function doUpdateFilter(evt) {\r\n  return async (dispatch) => {\r\n    let filterString = getUserFilter(evt);\r\n    try {\r\n      const result = await axios.get(\r\n        `https://api.spaceXdata.com/v3/launches?limit=10&${filterString}`\r\n      );\r\n      if (result.data) {\r\n        dispatch({ type: Actions.UPDATE_DATA, records: result.data });\r\n      }\r\n    } catch (ex) {\r\n      throw ex;\r\n    }\r\n  };\r\n}\r\n","import { Actions } from \"./actions\";\r\nconst initialState = {\r\n  records: [],\r\n};\r\nexport function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case Actions.FETCH_INITIAL_RECORD:\r\n      return {\r\n        ...state,\r\n        records: actions.records,\r\n      };\r\n    case Actions.UPDATE_DATA:\r\n      return {\r\n        ...state,\r\n        records: actions.records,\r\n      };\r\n    default:\r\n      return Object.keys(state).length > 0 ? state : initialState;\r\n  }\r\n}\r\n","import React from \"react\";\r\nconst Years = [\r\n  2006,\r\n  2007,\r\n  2008,\r\n  2009,\r\n  2010,\r\n  2011,\r\n  2012,\r\n  2013,\r\n  2014,\r\n  2015,\r\n  2016,\r\n  2017,\r\n  2018,\r\n  2019,\r\n  2020,\r\n];\r\nconst successfullLaunch = [true, false];\r\nconst successfullLanding = [true, false];\r\nexport class Filterbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { year: null, landing: null, launch: null };\r\n  }\r\n  filterYear = (year) => {\r\n    console.log(year);\r\n    this.setState({ year }, () => {\r\n      this.props.onUpdateFilter(this.state);\r\n    });\r\n  };\r\n  updateLandingStatus = (status) => {\r\n    this.setState({ landing: status }, () => {\r\n      this.props.onUpdateFilter(this.state);\r\n    });\r\n  };\r\n  udpateLaunchingStatus = (status) => {\r\n    this.setState({ launch: status }, () => {\r\n      this.props.onUpdateFilter(this.state);\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"filterbar\">\r\n        {Years.map((y, index) => (\r\n          <>\r\n            <span\r\n              className={`year ${\r\n                this.state.year && this.state.year === y\r\n                  ? \"year-active\"\r\n                  : \"year-inactive\"\r\n              }`}\r\n              onClick={() => this.filterYear(y, index)}\r\n              key={`year-${index}`}\r\n            >\r\n              {y}\r\n            </span>\r\n          </>\r\n        ))}\r\n        <br />\r\n        <h4 className=\"text-style\">successfull Landing</h4>\r\n        <br />\r\n\r\n        {successfullLanding.map((t, index) => (\r\n          <span\r\n            className={`landing ${\r\n              typeof this.state.landing === \"boolean\" &&\r\n              this.state.landing === t\r\n                ? \"success\"\r\n                : \"\"\r\n            }`}\r\n            onClick={() => this.updateLandingStatus(t)}\r\n            key={`landing-${index}`}\r\n          >\r\n            {`${t}`}\r\n          </span>\r\n        ))}\r\n        <h4 className=\"text-style\">successfull Launch</h4>\r\n        <br />\r\n        {successfullLaunch.map((t, index) => (\r\n          <span\r\n            className={`launch ${\r\n              typeof this.state.launch === \"boolean\" && this.state.launch === t\r\n                ? \"success\"\r\n                : \"\"\r\n            }`}\r\n            onClick={() => this.udpateLaunchingStatus(t)}\r\n            key={`landing-${index}`}\r\n          >\r\n            {`${t}`}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { connect } from \"react-redux\";\r\nexport function withReducer(mapStateToProps, mapDispatchToProps, reducer) {\r\n  return function (UserComponent) {\r\n    return class extends React.Component {\r\n      render() {\r\n        const store = createStore(reducer, applyMiddleware(thunk));\r\n        let Mycomp = connect(\r\n          mapStateToProps,\r\n          mapDispatchToProps\r\n        )(UserComponent);\r\n        return (\r\n          <Provider store={store}>\r\n            <Mycomp />\r\n          </Provider>\r\n        );\r\n      }\r\n    };\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { withReducer } from \"../HOC/withReducer\";\r\nimport { doFetchData, doUpdateFilter } from \"./actions\";\r\nimport { reducer } from \"./reducer\";\r\nimport { Filterbar } from \"../Filterbar\";\r\nclass RocketList extends React.Component {\r\n  componentWillMount() {\r\n    if (this.props.onFetchData) {\r\n      this.props.onFetchData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { records } = this.props;\r\n    return (\r\n      <div className=\"main-content\">\r\n        <Filterbar onUpdateFilter={this.props.onUpdateFilter} />\r\n        {records && records.length > 0 ? (\r\n          <div className=\"Rocket-list\">\r\n            {records.map((r) => {\r\n              return (\r\n                <div className=\"rocket-card\">\r\n                  <div className=\"rocket-image-view\">\r\n                    <img\r\n                      className=\"rocket-image\"\r\n                      alt={r.rocket[\"rocket_name\"]}\r\n                      src={r.img}\r\n                    />\r\n                  </div>\r\n                  <div className=\"rocket-detail\">\r\n                    <h4 className=\"rocket-name\">{`${r.mission_name} #${r.flight_number}`}</h4>\r\n                    <table>\r\n                      <tr>\r\n                        <th>\r\n                          <td>Mission Ids : </td>\r\n                        </th>\r\n                        <td>{r.mission_id}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>\r\n                          <td>Launch Year : </td>\r\n                        </th>\r\n                        <td>{r.launch_year}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>\r\n                          <td>Successful Launch : </td>\r\n                        </th>\r\n                        <td>{r.launch_success ? \"Yes\" : \"No\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>\r\n                          <td>Successful Landing : </td>\r\n                        </th>\r\n                        <td>\r\n                          {r.rocket[\"first_stage\"][\"cores\"][0][\"land_success\"]? \"Yes\":\"No\"}\r\n                        </td>\r\n                      </tr>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          \"No records\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ...state,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchData: () => dispatch(doFetchData()),\r\n    onUpdateFilter: (evt) => dispatch(doUpdateFilter(evt)),\r\n  };\r\n};\r\nexport default withReducer(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  reducer\r\n)(RocketList);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport RocketList from \"./components/Rocketwidget/RocketList\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RocketList />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}